@model PersonalProject.Models.JobAdvertismentViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm("Create", "JobAdvertisments", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>JobAdvertisment</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            </div>
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @Html.LabelFor(model => model.ActiveTill, htmlAttributes: new { @class = "control-label col-md-2" })
            </div>
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.ActiveTill, "{0:yyyy-MM-ddTHH:mm}", new { @class = "form-control", @type = "datetime-local" })
                @Html.ValidationMessageFor(model => model.ActiveTill, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @Html.LabelFor(model => model.Category.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            </div>
            <div class="col-md-10">
                @Html.EditorFor(model => model.Category.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Category.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
            </div>
            <div class="col-md-10">
                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>
        </div>
        <!-- SalaryFrom Field -->
        <div class="form-group">
            @Html.LabelFor(model => model.SalaryFrom, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SalaryFrom, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SalaryFrom, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- SalaryTo Field -->
        <div class="form-group">
            @Html.LabelFor(model => model.SalaryTo, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SalaryTo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SalaryTo, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Job Type Dropdown -->
        <div class="form-group">
            @Html.LabelFor(model => model.Type, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(
                    model => model.Type,
                    new SelectList(Enum.GetValues(typeof(PersonalProject.Models.JobEnums.JobTypes))),
                    "Select Job Type",
                    new { @class = "form-control" }
                )
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>
        </div>
        <!-- Job Condition Dropdown -->
        <div class="form-group">
            @Html.LabelFor(model => model.Condition, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(
                    model => model.Condition,
                    new SelectList(Enum.GetValues(typeof(PersonalProject.Models.JobEnums.JobCondition))),
                    "Select Job Condition",
                    new { @class = "form-control" }
                )
                @Html.ValidationMessageFor(model => model.Condition, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            </div>
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { id = "editor", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>
        @Html.HiddenFor(model => model.CompanyId)

        <div class="form-group">
            <div class="mt-3 text-white  w-auto">
                <input type="submit" value="Create" class="mx-0 btn btn-default text-white post-job rounded" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script src="@Url.Content("~/Scripts/tinymce/tinymce.min.js")"></script>
<script>tinymce.init({
        selector: '#editor',
        plugins: 'lists link image preview',
        toolbar: 'undo redo | formatselect | bold italic underline | alignleft aligncenter alignright | bullist numlist outdent indent | link image'
    });</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
